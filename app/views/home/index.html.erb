<script>
  var email = "jdoe@example.com";

  function convert_input_to_bytes(string) {
      let utf8Encode = new TextEncoder();
      return utf8Encode.encode(string);
    };

  function convert_string_to_bytes(string) {
      return Uint8Array.from(atob(string), c => c.charCodeAt(0));
    };

  function convert_bytes_to_string(bytes) {
      return window.btoa(String.fromCharCode(...Array.from(new Uint8Array(bytes))));
    };

  async function setup(identity_id, challenge) {
    let isUVPAA = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
    const id = convert_input_to_bytes(identity_id);

    if (isUVPAA === true) {
      navigator.credentials.create({
        publicKey: {
          rp: {
            name: "test-fido",
            id: "localhost",
          },
          user: {
            id: id,
            displayName: email,
            name: email,
          },
          challenge: challenge,
          pubKeyCredParams: [{
            type: "public-key",
            alg: -7
          }],
          authenticatorSelection: {
            authenticatorAttachment: "platform",
            userVerification: "required"
          }
        }
      }).then(async function (newCredentialInfo) {
          const decodedClientData = convert_bytes_to_string(newCredentialInfo.response.clientDataJSON);
          const decodedAttestationObject = convert_bytes_to_string(newCredentialInfo.response.attestationObject);

          const data = {
              identity: {
                  public_key_id: newCredentialInfo.id,
                  attestation_object: decodedAttestationObject,
                  client_data: decodedClientData
                }
            };
          const response = await fetch(
              `/identities/${identity_id}.json`,
              {
                  method: "PUT",
                    mode: "cors",
                    cache: "no-cache",
                    credentials: "same-origin",
                    headers: {
                        "Content-Type": "application/json"
                      },
                    body: JSON.stringify(data)
                }
            );

      }).catch(function (err) {
        alert(err);
      });
    } else {
      alert("No FIDO support");
    }
  };

  async function register() {
      const data = { uid: email };
      const response = await fetch(
          "/identities.json",
            {
              method: "POST",
              mode: "cors",
              cache: "no-cache",
              credentials: "same-origin",
              headers: {
                  "Content-Type": "application/json"
                },
              body: JSON.stringify(data)
            }
        );

      const response_data = await response.json()
      const challengeArrayBuffer = convert_input_to_bytes(response_data['challenge']).buffer;
      return setup(response_data["identity"]["id"], challengeArrayBuffer);
  };

    async function authenticate(identityId) {
        const identityResponse = await fetch(
            `/identities/${identityId}/initiate.json`,
            {
                method: 'POST',
                mode: 'cors',
                cache: "no-cache",
                credentials: "same-origin",
                headers: {
                    "Content-Type": "application/json"
                  }
              }
          )

        const identity = await identityResponse.json();

        console.log(identity);
        const publicKeyCredentialRequestOptions = {
            challenge: convert_input_to_bytes(identity['challenge']),
            allowCredentials: [{
                id: convert_string_to_bytes(identity['identity']['credential_id']),
                type: 'public-key',
                transports: ['platform'],
              }],
            timeout: 60000,
          }

        const assertion = await navigator.credentials.get({
            publicKey: publicKeyCredentialRequestOptions,
            userVerification: 'preferred'
          });

        const assertionResponse = assertion.response;

        console.log(assertion);

        const verifyData = {
            authentication_data: convert_bytes_to_string(assertionResponse.authenticatorData),
            client_data: convert_bytes_to_string(assertionResponse.clientDataJSON),
            signature: convert_bytes_to_string(assertionResponse.signature),
            user_handle: convert_bytes_to_string(assertionResponse.userHandle)
          };

        const verifyResponse = await fetch(
            `/identities/${identityId}/verify.json`,
            {
                method: 'POST',
                mode: 'cors',
                cache: "no-cache",
                credentials: "same-origin",
                headers: {
                    "Content-Type": "application/json"
                  },
                body: JSON.stringify(verifyData)
              }
          );

        const verifyResponseData = await verifyResponse.json();
        console.log(verifyResponseData);
      };
</script>

<h1>Home#index</h1>
<p>Find me in app/views/home/index.html.erb</p>

<form>
  <button onclick="register()">Register</button>

  <%- @identities.each do |identity| %>
    <button onclick="authenticate(<%= identity.id %>)">Authenticate <%= identity.id %></button>
  <%- end %>
</form>

